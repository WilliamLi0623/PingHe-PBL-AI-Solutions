# -*- coding: utf-8 -*-
"""William Li - Python Lists III Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QGLVABuV72yLuaI1mjDN1WRUkEd9d_Pj

# Python Lists III Assignment (40 pts)

---

# Part I - Slicing Questions (20 pts)

These short answer questions require one line of code using the slicing method we covered in class.
"""

# Run the following cell
# DON'T Modify it

alist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

"""###  1 Print the first and the last element of the list. (4 pts)"""

# Print the first and the last element of alist.

print(alist[0]);
print(alist[len(alist)-1]);

"""### 2 From alist, slice a sublist of all elements with even values (2, 4, 6, ...) (4 pts)

**You need to use slicing to receive credit for this question**
"""

# From alist, slice a sublist of all elements with even values (2, 4, 6, ...)
print(alist[1:10:2]);

"""### 3 From alist, slice a sublist of the first 4 elements (4 pts)

**You need to use slicing to receive credit for this question**
"""

# From alist, slice a sublist of the first 4 elements
print(alist[0:4]);

"""### 4 From alist, slice a sublist of the last 3 elements. (4 pts)

**You need to use slicing with NEGATIVE INDEX to receive credit for this question**
"""

# From alist, slice a sublist of the last 3 elements
# You need to use slicing with NEGATIVE INDEX to receive credit for this question
print(alist[-3:]);

"""### 5 From alist, slice a sublist of the last 3 elements, in reverse order. (4 pts)

**You need to use slicing with NEGATIVE INDEX to receive credit for this question**
"""

# From alist, slice a sublist of the last 3 elements, in reverse order.
# You need to use slicing with NEGATIVE INDEX to receive credit for this question
print(alist[-1:6:-1]);

"""# Part II - 2D Lists Questions

## Question 1 (10 pts)
Implement the following function:

returns a nested list where each element is a list containing 
    the index of an element in the original list and the element itself. 
    These lists should appear in increasing order of indices.

* Example 1:
    * Input: `['python', 'is', 'super', 'fun']`
    * Output: `[[0, 'python'], [1, 'is'], [2, 'super'], [3, 'fun']]`
* Example 2:
    * Input: `['hello']`
    * Output: `[[0, 'hello']]`
* Example 3:
    * Input: `[]`
    * Output: `[]`
"""

def enumerate(lst):
    """
    returns a nested list where each element is a list containing 
    the index of an element in the original list and the element itself. 
    These lists should appear in increasing order of indices.

    >>> enumerate(['python', 'is', 'super', 'fun'])
    [[0, 'python'], [1, 'is'], [2, 'super'], [3, 'fun']]
    >>> enumerate(['hello'])
    [[0, 'hello']]
    >>> enumerate([])
    []
    """
    tmp2=[];
    for i in range(0,len(lst),1):
      tmp1=[];
      tmp1.append(i);
      tmp1.append(lst[i]);
      tmp2.append(tmp1);
    return tmp2;

# You don't have to do anything here
# Just run the cell
# print the results

print(enumerate(['python', 'is', 'super', 'fun']))
print(enumerate(['hello']))
print(enumerate([]))

"""## Question 2 (10 pts)

Nested lists are often used to represent matrices, which are grids of numbers commonly used in linear algebra, computer graphics, and artificial intelligence. For example, the nested list `[[1, 2], [3, 4], [5, 6]]` represents this matrix:

\begin{bmatrix}
1 & 2\\
3 & 4 \\
5 & 6
\end{bmatrix}

One common operations you might perform is to multiply a matrix's elements by a constant. For example, we'd multiply a matrix by a constant like so:

$$
3 \times 
\begin{bmatrix}
1 & 2\\
3 & 4 \\
5 & 6
\end{bmatrix}
= 
\begin{bmatrix}
3 & 6\\
9 & 12 \\
15 & 18
\end{bmatrix}
$$

Your job is to implement the following function
"""

def matrix_constant_multiply(constant, matrix):
    """
    Multiplies the 2-dimensional matrix m (represented as a list of lists) 
    by a constant factor c and returns the result. m should not be modified.

    >>> matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    >>> matrix_constant_multiply(2, m)
    [[2, 4, 6], [8, 10, 12], [14, 16, 18]]
    """
    for i in range(0,len(matrix),1):
      for j in range(0,len(matrix[i]),1):
       matrix[i][j]*=constant;
    return matrix;

# You don't have to do anything here
# Just run the cell
# print your result

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(matrix_constant_multiply(2, matrix)) # You should have [[2, 4, 6], [8, 10, 12], [14, 16, 18]]